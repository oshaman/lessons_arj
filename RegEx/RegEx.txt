Урок 1.  Литература и ссылки
    http://ru.wikipedia.org/wiki/%D0%A0%D0%B5%D0%B3%D1%83%D0%BB%D1%8F%D1%80%D0%BD%D1%8B%D0%B5_%D0%B2%D1%8B%D1%80%D0%B0%D0%B6%D0%B5%D0%BD%D0%B8%D1%8F
    http://www.php.net/manual/ru/regexp.introduction.php
    http://phpclub.ru/detail/article/regexp_1

    http://regexlib.com/?AspxAutoDetectCookieSupport=1
    http://regexpal.com/
    http://gskinner.com/RegExr/
    http://www.gskinner.com/RegExr/desktop/
    Регулярные выражения работают медленнее ф-ции работы со строками, по-этому необходимо строить более конкретные РВ.
    .+ быстрее чем .*
-------------------------------------------------------------------------------------------------------------------------------------
Урок 2.  Литералы и метасимволы
    Ограничители - любые парные символы, кроме "\" и буквенно-цифровых.
        //
        ##
        ~~
        !! и т.д.
    Литералы - символы, которые обозначают сами себя
    Метасимволы - символы, которые обозначают сами себя, но могут и класс или группу символов
-------------------------------------------------------------------------------------------------------------------------------------
Урок 3.  Особенности использования символьного класса
    "[abc]" - любой один символ из трех указанных: или "a", или "b", или "c"
    "[a-f]" - символы в диапазоне от "a" до "f" (a,b,c,d,e,f)
    "[0-9]" - цифры от "0" до "9" (0,1,2,3,4,5,6,7,8,9)
    HW-3
        /<h[1-6]>/
-------------------------------------------------------------------------------------------------------------------------------------
Урок 4.  Пробел, исключение, табуляция и перевод строки
    исключение
        [^0-9]  - любой символ кроме цифровых
    табуляция
        \t
    перевод строки  (CR LF)
        \r\n    - для windows-формата
        \n    - для unix-формата
        \r    - для mac-формата
    HW-4
        1.  #\t\t# -------> #\t#
        2.  #\n\n# -------> #\n#
-------------------------------------------------------------------------------------------------------------------------------------
Урок 5.  Метасимволы символьных классов
    \d - [0-9], цифры
    \D - [^0-9], кроме цифр
    \w - [a-zA-Z0-9_], буквенно-цифровые символы и подчеркивание
    \W - [^a-zA-Z0-9_], кроме буквенно-цифровых символов и подчеркивания
    \s - [\r\n\t\f\v (пробел)], пробельные символы
    \S - [^\r\n\t\f\v (пробел)], кроме пробельных символов
-------------------------------------------------------------------------------------------------------------------------------------
Урок 6.  Квантификаторы
    "+" - одно или более вхождений предшествующего элемента || min:1, max:не ограничено. Жадный квантификатор.
    "*" - любое количество вхождений предшествующего элемента || min:0, max:не ограничено. Жадный квантификатор.
    "?" - указывает на необязательность предшествующего элемента || min:0, max:1. Жадный квантификатор.
    "{min,max}" - задает количество вхождений от значения min до значения max
    "{min,}" - задает количество вхождений от значения min до бесконечности
    "{точное количество}" - задает точное количество вхождений
    Квантификаторы по умолчанию являются жадными, т.е. захватывают как можно больше вхождений.
    Добавляя к квантификатору знак вопроса, мы делаем его ленивым, т.е. заставляем искать как можно меньше вхождений.
    "+?" - ленивый квантификатор
    "*?" - ленивый квантификатор
    "??" - ленивый квантификатор
    "{min,}?" - ленивый квантификатор
    HW-6
        Возьмите за основу шаблон ниже и составьте свой, который бы валидировал только адреса под номером 2 и 5.
        Шаблон: \w@\w\.\w

        1) mail@mail.31312
        2) ma42342_il@mail.com (подходит)
        3) _mail@mail.ru
        4) 3123mail@mail.ru
        5) t@test.com (подходит)
        ************
        #[a-z]\w*@[a-z]+\.[a-z]+#
        ************
-------------------------------------------------------------------------------------------------------------------------------------
Урок 7. Интервальные квантификаторы
    Интервальные квантификаторы позволяют точно указывать количество вхождений того или иного символа или группы символов.
    "{min,max}" - задает количество вхождений от значения min до значения max
    "{min,}" - задает количество вхождений от значения min до бесконечности
    "{точное количество}" - задает точное количество вхождений
    * = {0,}
    + = {1,}
    ? = {0,1}
    HW-7
        1. Имеется текст:
        ============================================
        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean vestibulum orci sed ante malesuada vulputate.
        In tempus, lacus eu luctus fringilla, ligula dui scelerisque justo, sit amet mollis velit turpis a nunc.
        Pellentesque interdum risus quis nisl vestibulum congue. Nam vel dolor sit amet urna eleifend consequat eget tincidunt neque.
        Maecenas sed justo sed dolor rhoncus malesuada. Maecenas ut mauris eu sem auctor viverra eu non mi.
        Duis in enim nec orci molestie facilisis. Vivamus sit amet maecenas porttitor urna. Maecenas cursus fermentum bibendum.
        Sed a nulla lectus, nec eleifend magna. Sed eu turpis non tortor ornare vestibulum eu eget risus.
        ============================================
        В данном тексте найдите все слова, состоящие из 8 букв, при этом начинаться они должны с литеры "m" и заканчиваться на литеру "s".
        Регистр не должен иметь значения.
        ************
        #[mM][a-zA-z]{6}[sS]#
        ************
        2. Имеются строки цифр с разделителями:
        ============================================
        01-01-2013
        011-1-2013
        1-01-2013
        01/222/20133
        1-1-00000
        1/01/2013
        01/01/13
        01-1-2013
        ============================================
        Выберите только те, которые соответствуют формату даты - "число(разделитель)месяц(разделитель)год"
        ************
        #[0-3]?[0-9][-/][0-1][0-9][-/][0-9]{2,4}#
        #\d{1,2}[-/]\d{1,2}[-/]\d{2,4}#
        ************
-------------------------------------------------------------------------------------------------------------------------------------
Урок 8. Жадные и ленивые квантификаторы
    Квантификаторы по своей природе являются жадными, т.е. стараются захватить как можно больше вхождений за один раз.
    Но порой с каждым вхождением необходимо работать отдельно.
    Именно для этого квантификаторы можно сделать ленивыми.(добавить символ "?")
    Текст:
        Some text with <a href="#">link</a> and another <a href="#">link2</a> and more.Some text with <a href="#">link3</a> and another <a href="#">link4</a> and more.
        Some text with <a href="#">link5</a> and another <a href="#">link6</a> and more.Some text with <a href="#">link7</a> and another <a href="#">link8</a> and more.
    Шаблон:
        #<a href="[^"]+">.*<\/a>#
    Результат:  (т.к .*)
        одно совпадение
        <a href="#">link</a> and another <a href="#">link2</a> and more.Some text with <a href="#">link3</a> and another <a href="#">link4</a> and more. Some text with <a href="#">link5</a> and another <a href="#">link6</a> and more.Some text with <a href="#">link7</a> and another <a href="#">link8</a>
    Шаблон:
        #<a href="[^"]+">.*<\/a>#
    Результат:  (т.к .*?)
        8 совпадений
        <a href="#">link</a>
        <a href="#">link2</a>
        <a href="#">link3</a>
        <a href="#">link4</a>
        <a href="#">link5</a>
        <a href="#">link6</a>
        <a href="#">link7</a>
        <a href="#">link8</a>
    HW-8
        1. Имеется текст:
    ============================================
    Lorem ipsum [B]dolor[/b] sit amet, consectetur adipiscing elit. Aenean vestibulum orci sed ante malesuada vulputate.
    [Link]In tempus[/Link], lacus eu luctus fringilla, ligula dui scelerisque justo, sit amet mollis velit turpis a nunc.
    Pellentesque interdum risus quis nisl vestibulum congue. Nam vel dolor [i]sit[/i] amet urna eleifend consequat eget tincidunt neque.
    Maecenas sed justo sed dolor rhoncus malesuada. Maecenas ut mauris eu sem auctor viverra eu non mi. Duis in enim nec orci molestie facilisis.
    Vivamus sit amet maecenas porttitor urna. Maecenas cursus fermentum bibendum. Sed a nulla lectus, nec eleifend magna.
    Sed eu turpis non tortor ornare vestibulum eu eget risus.
    ============================================
    В данном тексте есть слова с BB-тегами. Необходимо найти их.
    **********************************************************
    #\[[^\]]+\].+?\[\/[^\]]+\]#
-------------------------------------------------------------------------------------------------------------------------------------
Урок 9. Метасимволы начала и конца строки("якоря")
    Якорные метасимволы не захватывают совпадения, а лишь устанавливают соответствие позиций.
        "^" - циркумфлекс, крышка. В начале шаблона крышка является метасимволом начала строки.(синоним \A - работает только в однострочном режиме)
        "$" - знак доллара. В конце шаблона знак доллара является метасимволом конца строки.(синоним \Z - работает только в однострочном режиме)
    В однострочном режиме(по-умолчанию) все строки рассматриваются как одна строка.
    Расширенный режим привязки к границам строк. Имеет смысл использовать только в шаблонах с "якорями"
        "m" - модификатор включает режим работы шаблона с многострочным текстом
    HW-9
    ============================================
    Из строк ниже выберите только имена файлов с раширением .php - это строки с номерами 1, 3 и 5
    ============================================
    file1.php
    file2.html
    file3.phphtml.php
    file4.jpg
    phpfile.php
    file5php.html
    .php
    **********************************************************
    #^[a-zA-Z0-9\.]+\.php\r?$#mi
    **********************************************************
    #^.+\.php\r?$#mi
    **********************************************************
-------------------------------------------------------------------------------------------------------------------------------------
Урок 10. Метасимволы границы и не границы слова
    \b - граница слова
    \B - не граница слова
    cat --->    \bcat\b
    HW-10
    1. Имеются строки цифр с разделителями:
    ============================================
    01-01-2013
    011-1-2013
    1-01-2013
    01/222/20133
    1-1-00000
    1/01/2013
    01/01/13
    01-1-2013
    ============================================
    Выберите только те, которые соответствуют формату даты - "число(разделитель)месяц(разделитель)год"
    *********************************
    ^\d{1,2}[-\/]\d{1,2}[-\/]\d{2,4}$	gm
    *********************************

    2. Составьте шаблон для валидации номера банковской карты (16 цифр). При этом цифры могут идти слитно:
    1111222233334444
    так и через пробел:
    **********************************
    ^\d{4}\s?\d{4}\s?\d{4}\s?\d{4}$
    **********************************
    
-------------------------------------------------------------------------------------------------------------------------------------
Урок 11. Подвыражения в шаблоне
	\bcat\b|\bdog\b или \b(cat|dog)\b
	cat dog category panda scat test cat dogs  cats dog


	найти от 1900 до 2099
	19\d{2}|20\d{2} или использовать подвыражение - (19|20)\d{2}
	1950
	2000
	5000
	2100
	1899

	
	(sub)?category
	category subcategory
	
	(s(u)?b)?category
	category subcategory sbcategory
	
	^(\d{4}\s?){3}\d{4}$	mg
	
	+	1111222233334444
	-	11112222333344445
	-	1111 2222 3333 44445
	+	1111 2222 3333 4444
	-	1111 2222 3333-4444


	^.+\.(jpg|png|gif)$

	file1.php
	file2.html
	file3.phphtml.php
	file4.jpg
	phpfile.php
	file5php.html
	.php
	file.png
	file7.png

	1. В представленных строках найдите строки, соответствующие формату IP-адреса - 4 группы по 1-3 цифры, разделенные точкой
	====================================================
	127.0.0.1
	178.25.100.10
	1111.25.100.10
	146.50.50.50
	178.2222.100.10
	*********************************
    ^(\d{1,3}\.){3}\d{1,3}$		gm
    *********************************
	
	
	2. Из строки ниже выберите последовательности символов "cat", являющиеся составными частями слов
	====================================================
	cat test category dog scat test subcategory cat
	*********************************
	\Bcat|cat\B
	*********************************
-------------------------------------------------------------------------------------------------------------------------------------
12. Обратные ссылки

	/center|cent/		(если в условии одно слово является частью другого, то первым указываем более конкретный случай, т.е. слово которое больше)
	или cente?r? или cent(er)?
	category
	cent
	center

	выбрать все заголовки
	<h([1-6])>.+?<\/h\1>	\1 указывает на первую группировку ([1-6])

	<h1>Hello</h1>
	<p>Hello</p>
	<h2>Hello</h2>
	<h2>Hello-4-2</h4>
	<p>word<p>
	<h5>Hello</h5>
	<h7>Hello</h7>


	1. Найдите повторяющиеся целые слова (не части слова). Должны быть подсвечены "cat cat" и "the the"
	==================================
	*********************************
	\b(\w+)\b \b\1\b
	*********************************
	cat scat category cat cat test the the panda cat category
-------------------------------------------------------------------------------------------------------------------------------------
13. Операции замены в регулярных выражениях

	$pattern = '/((\w+)@\w+.\w+)/';	----> $1 - test@mail.com, $2 - test
	$str = '
		My email is test@mail.com. Send me email, please.
		And My email is test2@mail.com. Send me email to, please.';
	$replacement = '<a href="mailto:$1">$2</a>';
	
	preg_replace($pattern, $replacement, $str)
	
	
	
	1. Найдите в данном тексте все верные форматы номеров (номера из 10 цифр) и приведите их к формату (ххх) ххх-хх-хх.
	*************
	Формат номера оператора Киевстар - 0671111111. Формат номера оператора МТС - 0502222222. Неверный формат номера - 06300000000. Формат номера оператора Life - 0633333333.
	*************
	Итоговый текст должен быть таким:
	*************
	Формат номера оператора Киевстар - (067) 111-11-11. Формат номера оператора МТС - (050) 222-22-22. Неверный формат номера - 06300000000. Формат номера оператора Life - (063) 333-33-33.
	*************
	*********************************
	$pattern = '\b(\d{3})(\d{3})(\d{2})(\d{2})\b';
	$replacement = '/($1) $2-$3-$4/';
	*********************************
-------------------------------------------------------------------------------------------------------------------------------------
14. Просмотр вперед и назад
	===================================
	(?=шаблон) - Позитивный просмотр вперед
	(?!шаблон) - Негативный просмотр вперед
	
	(?<=шаблон) - Позитивный просмотр назад	 (назад не работает в JS)
	(?<!шаблон) - Негативный просмотр назад  (назад не работает в JS)
	===================================
	+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	/.+(?=<\/h2>)/ - выбираем только Header 2, не захватывая </h2>
	HEader 1 </h1>
	Header 2 </h2>
	
	/ivanov(?= ivan)/ig - выбираем всех Ivanov с именем Ivan	
	Ivanov Ivan
	Ivanov
	Ivanov Ivan
	Ivanov Petr
	/ivanov(?! ivan)/ig - выбираем всех Ivanov с именем не Ivan
	+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	
	$str = '100 $10 1000 $500 20';
	$pattern = '#(?<!\$)\b\d#'; - выбираем строки не содержащие знак $
	$pattern = "#(?<!\\$)\\b\\d#"; - если используются двойные кавычки, то нужно экранировать слеши 
	echo preg_replace($pattern, '.', $str);
	
	$str2 = '1000';
	$pattern2 = '#(?<=\d)(?=(\d{3})+$)#';	(?<=\d) - cмотрим назад(должны увидеть цифру) и (?=(\d{3})+$) - смотрим вперед(должны увидеть группы по три цифры и конец строки)
	echo preg_replace($pattern2, '.', $str2);
	
	*********************************
	Разбейте каждое число в переменной $str по разрядам
	$str = '100 1000 10000 100000 1000000 10000000';
	$pattern = '';
	echo preg_replace($pattern, '.', $str);
	*********************************
	$pattern = '(?<=\d)(?=(\d{3})+(?=$|\s))';
	*********************************
-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
